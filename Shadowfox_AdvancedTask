pip install torch transformers

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, Trainer, TrainingArguments, TextDataset, DataCollatorForLanguageModeling
import torch
from math import exp

model_name = "gpt2"


tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)


generator = pipeline("text-generation", model=model, tokenizer=tokenizer, device=0 if torch.cuda.is_available() else -1)


prompt = "Once upon a time in a land far, far away, there was a"
generated_text = generator(prompt, max_length=50, num_return_sequences=1)
print("Generated Text:", generated_text[0]['generated_text'])
def load_dataset(file_path, tokenizer, block_size=128):
    dataset = TextDataset(
        tokenizer=tokenizer,
        file_path=file_path,
        block_size=block_size,
    )
    return dataset

training_args = TrainingArguments(
    output_dir="./gpt2-finetuned",
    overwrite_output_dir=True,
    num_train_epochs=1,
    per_device_train_batch_size=4,
    save_steps=10_000,
    save_total_limit=2,
)
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)
file_path = "your_dataset.txt"  # Replace with your dataset path
train_dataset = load_dataset(file_path, tokenizer)
trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset,
)

def calculate_perplexity(text):
    inputs = tokenizer(text, return_tensors="pt").to(device)
    with torch.no_grad():
        outputs = model(**inputs, labels=inputs["input_ids"])
        loss = outputs.loss
        perplexity = exp(loss.item())
    return perplexity

test_sentence = "The quick brown fox jumps over the lazy dog."
perplexity = calculate_perplexity(test_sentence)
print("Perplexity:", perplexity)

